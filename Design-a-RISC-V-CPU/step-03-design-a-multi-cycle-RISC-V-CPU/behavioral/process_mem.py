import sys

def process_mem(input_file, output_file):
    """
    Process a memory initialization file, removing trailing redundant zeros.

    Args:
        input_file (str): Path to the input file generated by `xxd`.
        output_file (str): Path to the cleaned output `.mem` file.
    """
    processed_lines = []

    with open(input_file, 'r') as infile:
        for line in infile:
            # Extract the second column (the instruction part) from the xxd output
            parts = line.strip().split()
            if len(parts) < 2:
                continue  # Skip lines that do not have at least two parts
            instruction = parts[1]

            if instruction == "00000000":
                continue  
            processed_lines.append(instruction)

    with open(output_file, 'w') as outfile:
        outfile.write("\n".join(processed_lines) + "\n")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python process_mem.py <input_file> <output_file>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]

    process_mem(input_file, output_file)
